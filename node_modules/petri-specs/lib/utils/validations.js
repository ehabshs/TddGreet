const {singleScopeTemplate, testGroupsTemplate, specTemplate} = require('./specTemplates');
const uniq = require('lodash.uniq');

function isSameType(expected, actual) {
  return typeof expected === typeof actual;
}

function isLegalLength(expected, actual) {
  return actual.length === undefined || actual.length >= expected.length;
}

function isUniqueArray(array = []) {
  return uniq(array).length === array.length && array.every(x => x.length > 0);
}

function validateScopes(scopes) {
  return isUniqueArray(scopes)
}

function validateGroups(controlGroup, variants) {
  //TODO: remove (controlGroup === undefined && variants === undefined) condition after testGroups will be deprecated
  if ((controlGroup === undefined && variants === undefined) || (!controlGroup && variants.length === 0)) {
    return true;
  }

  return controlGroup && variants.length > 0 && isUniqueArray([controlGroup].concat(variants));
}

function validateSpecTemplate(aSpec, specTemplate) {
  return Object.keys(specTemplate).every(key => {
    const expected = specTemplate[key];
    const actual = aSpec[key];
    return isSameType(expected, actual) &&
    isLegalLength(expected, actual)
  });
}

module.exports = function(aSpec) {
  return [
      singleScopeTemplate,
      testGroupsTemplate,
      specTemplate
    ].some(aTemplate =>
      validateSpecTemplate(aSpec, aTemplate) &&
      validateScopes(aSpec.scopes) &&
      validateGroups(aSpec.controlGroup, aSpec.variants)
    );
}
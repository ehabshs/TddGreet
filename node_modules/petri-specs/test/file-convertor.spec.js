const convert = require('../lib/utils/file-convertor');
const {expect} = require('chai');
const {spec, testGroupsSpec, singleScopeSpec, multipleSingleScopeSpecs, multipleSpecs} = require('./testkit');
const {and} = require('./test-utils');

describe('petri-specs-convert', () => {
  const name = 'specName';
  const name2 = 'specName2';

  it('should work for singleScope specs', () => {
    const actual = singleScopeSpec(name);
    const converted = spec(name);
    expect(convert(actual)).to.eql(converted);
  });

  it('should work for singleScope specs with some test groups', () => {
    const actual = singleScopeSpec(name, and({testGroups: ['false', 'true']}));
    const converted = spec(name, and({controlGroup: 'false', variants: ['true']}));
    expect(convert(actual)).to.eql(converted);
  });

  it('should work for testGroupsSpec specs', () => {
    const actual = testGroupsSpec(name);
    const converted = spec(name);
    expect(convert(actual)).to.eql(converted);
  });

  it('should work for testGroupsSpec specs with 2 test groups', () => {
    const actual = testGroupsSpec(name, and({testGroups: ['false', 'true']}));
    const converted = spec(name, and({controlGroup: 'false', variants: ['true']}));
    expect(convert(actual)).to.eql(converted);
  });

  it('should work for testGroupsSpec specs with more than 2 test groups', () => {
    const actual = testGroupsSpec(name, and({testGroups: ['a', 'b', 'c']}));
    const converted = spec(name, and({controlGroup: 'a', variants: ['b', 'c']}));
    expect(convert(actual)).to.eql(converted);
  });

  it('should not change specs already in the newer format', () => {
    const actual = spec(name);
    expect(convert(actual)).to.eql(actual);
  });

  it('should not change specs with 1 testGroup', () => {
    const actual = testGroupsSpec(name, and({testGroups: ['a']}));
    expect(convert(actual)).to.eql(actual);
  });

  it('should convert multiple specs in the same file', () => {
    const actual = multipleSingleScopeSpecs([name, name2]);
    const converted = multipleSpecs([name, name2]);
    expect(convert(actual)).to.eql(converted);
  });
});

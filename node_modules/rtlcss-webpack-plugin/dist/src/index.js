'use strict';

var _classCallCheck2 = require('babel-runtime/helpers/classCallCheck');

var _classCallCheck3 = _interopRequireDefault(_classCallCheck2);

var _createClass2 = require('babel-runtime/helpers/createClass');

var _createClass3 = _interopRequireDefault(_createClass2);

var _path = require('path');

var _path2 = _interopRequireDefault(_path);

var _rtlcss = require('rtlcss');

var _rtlcss2 = _interopRequireDefault(_rtlcss);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

var cssOnly = function cssOnly(filename) {
  return _path2.default.extname(filename) === '.css';
};

var RtlCssPlugin = function () {
  function RtlCssPlugin(options) {
    (0, _classCallCheck3.default)(this, RtlCssPlugin);

    if (typeof options === 'string') {
      options = {
        filename: options
      };
    }
    this.options = options || {
      filename: '[name].rtl.css'
    };
  }

  (0, _createClass3.default)(RtlCssPlugin, [{
    key: 'apply',
    value: function apply(compiler) {
      var _this = this;

      compiler.plugin('emit', function (compilation, callback) {
        // Explore each chunk (build output):
        compilation.chunks.forEach(function (chunk) {
          // Explore each asset filename generated by the chunk:
          chunk.files.filter(cssOnly).forEach(function (filename) {
            // Get the asset source for each file generated by the chunk:
            var src = compilation.assets[filename].source();
            var dst = _rtlcss2.default.process(src);
            var dstFileName = compilation.getPath(_this.options.filename, { chunk: chunk });

            compilation.assets[dstFileName] = {
              source: function source() {
                return dst;
              },
              size: function size() {
                return dst.length;
              }
            };
            chunk.files.push(dstFileName);
          });
        });

        callback();
      });
    }
  }]);
  return RtlCssPlugin;
}();

module.exports = RtlCssPlugin;
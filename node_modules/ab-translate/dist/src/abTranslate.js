'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});

var _slicedToArray2 = require('babel-runtime/helpers/slicedToArray');

var _slicedToArray3 = _interopRequireDefault(_slicedToArray2);

var _keys = require('babel-runtime/core-js/object/keys');

var _keys2 = _interopRequireDefault(_keys);

var _extends2 = require('babel-runtime/helpers/extends');

var _extends3 = _interopRequireDefault(_extends2);

var _assign = require('babel-runtime/core-js/object/assign');

var _assign2 = _interopRequireDefault(_assign);

exports.getTranslationSpecs = getTranslationSpecs;

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

var fs = require('fs');
var glob = require('glob');
var xml2js = require('xml2js');
var path = require('path');

function getTranslationSpecs() {
  var options = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};

  try {
    var specProps = getSpecProps(options);
    var files = glob.sync(path.join(options.base || process.cwd(), '/@(app|src)/**/*_en.json'));
    return files.reduce(function (specs, fileName) {
      var singleFileSpecs = createSpecsFromFile(fileName, specProps);
      return (0, _assign2.default)(specs, singleFileSpecs);
    }, {});
  } catch (e) {
    console.warn('ab-translate - could not find translation keys', e);
    return {};
  }
}

var defaultSpecProps = {
  onlyForLoggedInUsers: true
};

function getSpecProps(options) {
  var specProps = (0, _extends3.default)({}, defaultSpecProps, getProjectProps(options));

  if ('onlyForLoggedInUsers' in options) {
    specProps.onlyForLoggedInUsers = options.onlyForLoggedInUsers;
  }

  if ('scopes' in options) {
    specProps.scopes = options.scopes;
  }

  return specProps;
}

function getProjectPomFile(pomFileName) {
  try {
    return fs.readFileSync(pomFileName, 'utf-8');
  } catch (e) {
    return null;
  }
}

function getProjectProps(options) {
  var pomFileContent = getProjectPomFile(options.pom || 'pom.xml');
  if (!pomFileContent) {
    return {};
  }
  var parser = new xml2js.Parser();
  var res = void 0;
  parser.parseString(pomFileContent, function (err, result) {
    if (err) {
      console.warn(err);
      console.warn('please make sure your pom.xml is valid');
    } else {
      var email = parseTextNode(result.project.developers[0].developer[0].email);
      var artifactId = parseTextNode(result.project.artifactId);
      res = { owner: email, scopes: [artifactId] };
    }
  });
  return res;
}

function parseTextNode(arr) {
  return arr.join('').trim();
}

function createSpecsFromFile(fileName, _ref) {
  var owner = _ref.owner,
      scopes = _ref.scopes,
      onlyForLoggedInUsers = _ref.onlyForLoggedInUsers;

  try {
    var fileContent = JSON.parse(fs.readFileSync(fileName, 'utf-8'));
    return (0, _keys2.default)(fileContent).filter(function (translationKey) {
      return (/.*\|abTranslate_\d+\|?.*/.test(translationKey)
      );
    }).reduce(function (acc, translationKey) {
      var _$exec = /(.*)\|abTranslate_(\d+)\|?(.*)/.exec(translationKey),
          _$exec2 = (0, _slicedToArray3.default)(_$exec, 4),
          baseTranslationKey = _$exec2[1],
          group = _$exec2[2],
          specName = _$exec2[3];

      var specKey = 'specs.abTranslate.' + scopes[0] + '.' + (specName ? 'abSpec-' + specName : baseTranslationKey);
      if (!acc[specKey]) {
        acc[specKey] = {
          owner: owner,
          scopes: scopes,
          onlyForLoggedInUsers: onlyForLoggedInUsers,
          controlGroup: '0',
          variants: [group]
        };
      } else if (!acc[specKey].variants.includes(group)) {
        acc[specKey].variants.push(group);
      }
      return acc;
    }, {});
  } catch (e) {
    console.warn('ab-translate - could not read file', fileName);
    return {};
  }
}
'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});

var _keys = require('babel-runtime/core-js/object/keys');

var _keys2 = _interopRequireDefault(_keys);

var _set = require('babel-runtime/core-js/set');

var _set2 = _interopRequireDefault(_set);

var _toConsumableArray2 = require('babel-runtime/helpers/toConsumableArray');

var _toConsumableArray3 = _interopRequireDefault(_toConsumableArray2);

var _slicedToArray2 = require('babel-runtime/helpers/slicedToArray');

var _slicedToArray3 = _interopRequireDefault(_slicedToArray2);

exports.default = abTranslate;

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function abTranslate(experiments, translations) {
  if (!experiments || experiments.toString() !== '[object Object]') {
    return translations;
  }
  if (!translations) {
    return {};
  }
  //create a hash that contains the conversion between the old key and the new key
  var abExperiments = {};
  for (var expKey in experiments) {
    if (Object.prototype.hasOwnProperty.call(experiments, expKey)) {
      (function () {
        var experimentValue = experiments[expKey];
        var isAbTest = /specs\.abTranslate\.(.*?)\.(.*)$/.exec(expKey);
        if (isAbTest) {
          var translationDetails = isAbTest[2];

          var _translationDetails$s = translationDetails.split('abSpec-'),
              _translationDetails$s2 = (0, _slicedToArray3.default)(_translationDetails$s, 2),
              translationKey = _translationDetails$s2[0],
              specName = _translationDetails$s2[1];

          var translationKeys = void 0;
          if (specName) {
            translationKeys = [].concat((0, _toConsumableArray3.default)(new _set2.default((0, _keys2.default)(translations).filter(function (key) {
              return key.includes(specName);
            }).map(function (key) {
              return key.split('|abTranslate')[0];
            }))));
          } else {
            translationKeys = [translationKey];
          }
          translationKeys.forEach(function (key) {
            abExperiments[key] = key;
            if (experimentValue !== '0') {
              var specSuffix = specName ? '|' + specName : '';
              abExperiments[key] = key + '|abTranslate_' + experimentValue + specSuffix;
            }
          });
        }
      })();
    }
  }

  //replace existing translation keys with abTest results
  for (var translationKey in abExperiments) {
    // eslint-disable-line guard-for-in
    var translationHasExperiment = Object.prototype.hasOwnProperty.call(abExperiments, translationKey);
    var doesAbTranslationKeyExist = translations[abExperiments[translationKey]];

    if (translationHasExperiment && doesAbTranslationKeyExist) {
      translations[translationKey] = translations[abExperiments[translationKey]];
    }
  }
  return translations;
}
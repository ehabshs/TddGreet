'use strict';

var _stringify = require('babel-runtime/core-js/json/stringify');

var _stringify2 = _interopRequireDefault(_stringify);

var _abTranslate = require('../src/abTranslate');

var _abTranslateRuntime = require('../src/abTranslate-runtime');

var _abTranslateRuntime2 = _interopRequireDefault(_abTranslateRuntime);

var _abTranslate2 = require('./abTranslate.driver');

var _abTranslate3 = _interopRequireDefault(_abTranslate2);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

jest.mock('glob'); // eslint-disable-line no-undef
jest.mock('fs'); // eslint-disable-line no-undef

console.warn = jest.fn(); // eslint-disable-line no-undef

describe('abTranslate', function () {
  var driver = void 0;
  beforeEach(function () {
    driver = new _abTranslate3.default();
  });

  describe('getTranslationSpecs', function () {
    describe('default pom', function () {
      it('should compose a correct spec for a single file', function () {
        driver.given.pomIsDefined().given.translationFiles({
          'file1.json': driver.FILE1
        });

        var result = (0, _abTranslate.getTranslationSpecs)();

        expect(result).toEqual({
          'specs.abTranslate.ab-translate.button-text': {
            owner: 'yairh@wix.com',
            scopes: ['ab-translate'],
            onlyForLoggedInUsers: true,
            controlGroup: '0',
            variants: ['1', '2']
          }
        });
      });

      it('should return an empty object when failing to read the pom.xml', function () {
        var result = (0, _abTranslate.getTranslationSpecs)();
        expect(result).toEqual({});
      });

      it('should return an empty object when there are no translation files', function () {
        driver.given.pomIsDefined();
        var result = (0, _abTranslate.getTranslationSpecs)();
        expect(result).toEqual({});
      });

      it('should return an empty object when there is no pom.xml file', function () {
        var result = (0, _abTranslate.getTranslationSpecs)();
        expect(result).toEqual({});
      });

      it('should silently fail when failing to read a translation file', function () {
        driver.given.pomIsDefined().given.translationFiles({
          'file1.json': driver.FILE1,
          'file2.json': undefined
        });

        var result = (0, _abTranslate.getTranslationSpecs)();
        expect(result).toEqual({
          'specs.abTranslate.ab-translate.button-text': {
            owner: 'yairh@wix.com',
            scopes: ['ab-translate'],
            onlyForLoggedInUsers: true,
            controlGroup: '0',
            variants: ['1', '2']
          }
        });
      });

      it('should compose a correct spec for a single file with an alternative base directory', function () {
        var base = '/alternative-location';
        driver.given.pomIsDefined().given.translationFiles({
          'file.json': driver.FILE1
        });

        var result = (0, _abTranslate.getTranslationSpecs)({ base: base });

        expect(driver.get.globPath()).toContain(base);
        expect(result).toEqual({
          'specs.abTranslate.ab-translate.button-text': {
            owner: 'yairh@wix.com',
            scopes: ['ab-translate'],
            onlyForLoggedInUsers: true,
            controlGroup: '0',
            variants: ['1', '2']
          }
        });
      });
    });

    describe('scope and forRegisteredUsers from config', function () {
      it('should allow to set the scope explicitly', function () {
        driver.given.pomIsDefined().given.translationFiles({
          'file1.json': driver.FILE1
        });

        var result = (0, _abTranslate.getTranslationSpecs)({ scopes: ['alt-scope', 'alt-scope2'] });

        expect(result).toEqual({
          'specs.abTranslate.alt-scope.button-text': {
            owner: 'yairh@wix.com',
            scopes: ['alt-scope', 'alt-scope2'],
            onlyForLoggedInUsers: true,
            controlGroup: '0',
            variants: ['1', '2']
          }
        });
      });

      it('should allow to set forLoggedInUsers', function () {
        driver.given.pomIsDefined().given.translationFiles({
          'file1.json': driver.FILE1
        });

        var result = (0, _abTranslate.getTranslationSpecs)({ onlyForLoggedInUsers: false });

        expect(result).toEqual({
          'specs.abTranslate.ab-translate.button-text': {
            owner: 'yairh@wix.com',
            scopes: ['ab-translate'],
            onlyForLoggedInUsers: false,
            controlGroup: '0',
            variants: ['1', '2']
          }
        });
      });

      it('should create a spec according to the given spec name', function () {
        driver.given.pomIsDefined().given.translationFiles({
          'file1.json': (0, _stringify2.default)({
            'button-text': 'default value',
            'button-text|abTranslate_1|new-spec': 'true value',
            'button-text|abTranslate_2|new-spec': 'false value'
          })
        });

        var revisedTranslations = (0, _abTranslate.getTranslationSpecs)();
        expect(revisedTranslations).toEqual({
          'specs.abTranslate.ab-translate.abSpec-new-spec': { owner: 'yairh@wix.com',
            scopes: ['ab-translate'],
            onlyForLoggedInUsers: true,
            controlGroup: '0',
            variants: ['1', '2'] } });
      });

      it('should create one spec without duplicate variants', function () {
        driver.given.pomIsDefined().given.translationFiles({
          'file1.json': (0, _stringify2.default)({
            'button-text': 'button default value',
            'button-text|abTranslate_1|new-spec': 'button true value',
            'button-text|abTranslate_2|new-spec': 'button false value',
            'title-text': 'title default value',
            'title-text|abTranslate_1|new-spec': 'title true value',
            'title-text|abTranslate_2|new-spec': 'title false value'
          })
        });

        var revisedTranslations = (0, _abTranslate.getTranslationSpecs)();
        expect(revisedTranslations).toEqual({
          'specs.abTranslate.ab-translate.abSpec-new-spec': { owner: 'yairh@wix.com',
            scopes: ['ab-translate'],
            onlyForLoggedInUsers: true,
            controlGroup: '0',
            variants: ['1', '2'] } });
      });
    });
  });

  describe('abTranslate', function () {
    it('should create a correct translation key for a certain value', function () {
      var experiments = {
        'specs.abTranslate.ab-translate.button-text': '1'
      };
      var translations = {
        'button-text': 'default value',
        'button-text|abTranslate_1': '1 value',
        'button-text|abTranslate_2': '2 value'
      };
      var revisedTranslations = (0, _abTranslateRuntime2.default)(experiments, translations);
      expect(revisedTranslations).toEqual({
        'button-text': '1 value',
        'button-text|abTranslate_1': '1 value',
        'button-text|abTranslate_2': '2 value'
      });
    });

    it('should create a correct translation key for a certain value with a custom spec', function () {
      var experiments = {
        'specs.abTranslate.ab-translate.abSpec-new-spec': '1'
      };
      var translations = {
        'button-text': 'default value',
        'button-text|abTranslate_1|new-spec': '1 value',
        'button-text|abTranslate_2|new-spec': '2 value'
      };
      var revisedTranslations = (0, _abTranslateRuntime2.default)(experiments, translations);
      expect(revisedTranslations).toEqual({
        'button-text': '1 value',
        'button-text|abTranslate_1|new-spec': '1 value',
        'button-text|abTranslate_2|new-spec': '2 value'
      });
    });

    it('should not change the default value if there is no matched key', function () {
      var experiments = {
        'specs.abTranslate.ab-translate.abSpec-new-spec': '1'
      };
      var translations = {
        'button-text': 'default value',
        'button-text|abTranslate_1': '1 value',
        'button-text|abTranslate_2': '2 value'
      };
      var revisedTranslations = (0, _abTranslateRuntime2.default)(experiments, translations);
      expect(revisedTranslations).toEqual({
        'button-text': 'default value',
        'button-text|abTranslate_1': '1 value',
        'button-text|abTranslate_2': '2 value'
      });
    });

    it('should create a correct translation key for a different value', function () {
      var experiments = {
        'specs.abTranslate.ab-translate.button-text': '2'
      };
      var translations = {
        'button-text': 'default value',
        'button-text|abTranslate_1': '1 value',
        'button-text|abTranslate_2': '2 value'
      };
      var revisedTranslations = (0, _abTranslateRuntime2.default)(experiments, translations);
      expect(revisedTranslations).toEqual({
        'button-text': '2 value',
        'button-text|abTranslate_1': '1 value',
        'button-text|abTranslate_2': '2 value'
      });
    });

    it('should create a correct translation key for a 0 value', function () {
      var experiments = {
        'specs.abTranslate.ab-translate.button-text': '0'
      };
      var translations = {
        'button-text': 'default value',
        'button-text|abTranslate_1': '1 value',
        'button-text|abTranslate_2': '2 value'
      };
      var revisedTranslations = (0, _abTranslateRuntime2.default)(experiments, translations);
      expect(revisedTranslations).toEqual({
        'button-text': 'default value',
        'button-text|abTranslate_1': '1 value',
        'button-text|abTranslate_2': '2 value'
      });
    });

    it('should retain the default value if no experiment is detected', function () {
      var experiments = {};
      var translations = {
        'button-text': 'default value',
        'button-text|abTranslate_1': 'true value',
        'button-text|abTranslate_2': 'false value'
      };
      var revisedTranslations = (0, _abTranslateRuntime2.default)(experiments, translations);
      expect(revisedTranslations).toEqual({
        'button-text': 'default value',
        'button-text|abTranslate_1': 'true value',
        'button-text|abTranslate_2': 'false value'
      });
    });

    it('should not change the translations if experiments are undefined', function () {
      var translations = {
        'button-text': 'default value',
        'button-text|abTranslate_1': 'true value',
        'button-text|abTranslate_2': 'false value'
      };
      var revisedTranslations = (0, _abTranslateRuntime2.default)(undefined, translations);
      expect(revisedTranslations).toEqual({
        'button-text': 'default value',
        'button-text|abTranslate_1': 'true value',
        'button-text|abTranslate_2': 'false value'
      });
    });

    it('should not change the translations if experiments are not an object', function () {
      var translations = {
        'button-text': 'default value',
        'button-text|abTranslate_1': 'true value',
        'button-text|abTranslate_2': 'false value'
      };
      var revisedTranslations = (0, _abTranslateRuntime2.default)(3, translations);
      expect(revisedTranslations).toEqual({
        'button-text': 'default value',
        'button-text|abTranslate_1': 'true value',
        'button-text|abTranslate_2': 'false value'
      });
    });

    it('should return an empty object is translations are undefined', function () {
      var experiments = {
        'specs.abTranslate.ab-translate.button-text': 'maybe'
      };
      var revisedTranslations = (0, _abTranslateRuntime2.default)(experiments, undefined);
      expect(revisedTranslations).toEqual({});
    });

    it('should choose the right value for each translation key in case of multiple tests per spec', function () {
      var experiments = {
        'specs.abTranslate.ab-translate.abSpec-new-spec': '1'
      };
      var translations = {
        'button-text': 'default value',
        'button-text|abTranslate_1|new-spec': '1 value',
        'button-text|abTranslate_2|new-spec': '2 value',
        'button-text-2': 'second default value',
        'button-text-2|abTranslate_1|new-spec': 'second 1 value',
        'button-text-2|abTranslate_2|new-spec': 'second 2 value'
      };
      var revisedTranslations = (0, _abTranslateRuntime2.default)(experiments, translations);
      expect(revisedTranslations).toEqual({
        'button-text': '1 value',
        'button-text|abTranslate_1|new-spec': '1 value',
        'button-text|abTranslate_2|new-spec': '2 value',
        'button-text-2': 'second 1 value',
        'button-text-2|abTranslate_1|new-spec': 'second 1 value',
        'button-text-2|abTranslate_2|new-spec': 'second 2 value'
      });
    });

    it('should choose the base key value in case of out of bound experiment value for multiple tests per spec', function () {
      var experiments = {
        'specs.abTranslate.ab-translate.abSpec-new-spec': '2'
      };
      var translations = {
        'button-text': 'default value',
        'button-text|abTranslate_1|new-spec': '1 value',
        'button-text-2': 'second default value',
        'button-text-2|abTranslate_1|new-spec': 'second 1 value',
        'button-text-2|abTranslate_2|new-spec': 'second 2 value'
      };
      var revisedTranslations = (0, _abTranslateRuntime2.default)(experiments, translations);
      expect(revisedTranslations).toEqual({
        'button-text': 'default value',
        'button-text|abTranslate_1|new-spec': '1 value',
        'button-text-2': 'second 2 value',
        'button-text-2|abTranslate_1|new-spec': 'second 1 value',
        'button-text-2|abTranslate_2|new-spec': 'second 2 value'
      });
    });
  });
});
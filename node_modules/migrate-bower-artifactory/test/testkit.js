const fs = require('fs');
const os = require('os');
const path = require('path');
const childProcess = require('child_process');
const utils = require('../lib/utils');

module.exports.setupProject = files => {
  const folder = fs.mkdtempSync(path.join(os.tmpdir(), 'migrate-bower-artifactory-'));

  Object.keys(files)
    .forEach(key => {
      const content = typeof files[key] === 'string' ? files[key] : JSON.stringify(files[key], null, 2);
      const filePath = path.join(folder, key);

      fs.writeFileSync(filePath, content, {encoding: 'utf8'});
    });

  return {
    cleanup: () => {
      Object.keys(files).forEach(key => {
        fs.unlinkSync(path.join(folder, key));
      });
      fs.rmdirSync(folder);
    },
    readJSON: (fileName) => {
      return utils.readJSON(path.join(folder, fileName));
    },
    read: name => {
      return fs.readFileSync(path.join(folder, name)).toString();
    },
    migrate: () => {
      const executable = path.join(__dirname, '../lib/migrate-bower-artifactory.js');
      return new Promise((resolve, reject) => {
        childProcess.exec('node ' + executable, {cwd: folder}, (error, stdout, stderr) => {
          error ? reject(stderr) : resolve(stdout);
        });
      });
    }
  };
};

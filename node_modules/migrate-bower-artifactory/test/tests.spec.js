const testkit = require('./testkit');
const chai = require('chai');
const expect = chai.expect;

const getOldStructure = () => ({
  "registry": {
    "search": ["https://bower.herokuapp.com", "http://wix:wix@mirror.wixpress.com:3333"],
    "register": "http://wix:wix@mirror.wixpress.com:3333",
    "publish": "http://wix:wix@mirror.wixpress.com:3333"
  }
});

const getNewStructure = () => ({
  registry: 'https://bower.dev.wixpress.com',
  resolvers: [
    'bower-art-resolver'
  ]
});

describe('migrate-bower-artifactory', () => {
  let project;

  afterEach(() => project.cleanup());

  describe('patch successfully', () => {
    it('should patch the .bowerrc and add dependency to package.json', () => {
      const bowerrc = getOldStructure();

      const pj = {};

      project = testkit.setupProject({
        '.bowerrc': bowerrc,
        'package.json': pj
      });

      return project.migrate()
        .then(() => {
          expect(project.readJSON('.bowerrc')).to.eql(getNewStructure());

          expect(project.readJSON('package.json')).to.eql({
            devDependencies: {
              'bower-art-resolver': '^2.0.9'
            }
          });

          expect(project.read('.bowerrc').endsWith('\n')).to.be.true;
          expect(project.read('package.json').endsWith('\n')).to.be.true;
        });
    });

    it('should patch but keep other fields', () => {
      const bowerrc = Object.assign(getOldStructure(), {"directory": "app/bower_components"});

      project = testkit.setupProject({
        '.bowerrc': bowerrc
      });

      return project.migrate()
        .then(() => {
          expect(project.readJSON('.bowerrc'))
            .to.eql(Object.assign(getNewStructure(), {"directory": "app/bower_components"}));
        });
    });
  });

  describe('do not patch', () => {
    it('should not patch .bowerrc if not registerd', () => {
      const bowerrc = {
        "directory": "app/bower_components"
      };

      project = testkit.setupProject({
        '.bowerrc': bowerrc
      });

      return project.migrate()
        .then(() => expect(project.readJSON('.bowerrc')).to.eql(bowerrc));
    });
  });
});